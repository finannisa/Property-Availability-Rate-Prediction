{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_prop = pd.read_csv('dataNov22.csv', engine='python')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Unnamed: 0</th>\n",
       "      <th>__typename</th>\n",
       "      <th>calendarDate</th>\n",
       "      <th>available</th>\n",
       "      <th>maxNights</th>\n",
       "      <th>minNights</th>\n",
       "      <th>availableForCheckin</th>\n",
       "      <th>availableForCheckout</th>\n",
       "      <th>bookable</th>\n",
       "      <th>price.__typename</th>\n",
       "      <th>price.localPriceFormatted</th>\n",
       "      <th>Property Name</th>\n",
       "      <th>Region</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>MerlinCalendarDay</td>\n",
       "      <td>2022-11-01</td>\n",
       "      <td>False</td>\n",
       "      <td>1125</td>\n",
       "      <td>1</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>MerlinCalendarDayPrice</td>\n",
       "      <td>NaN</td>\n",
       "      <td>A.1 New 1BR villa with bathtub and private pool</td>\n",
       "      <td>Badung</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>MerlinCalendarDay</td>\n",
       "      <td>2022-11-02</td>\n",
       "      <td>True</td>\n",
       "      <td>1125</td>\n",
       "      <td>1</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>MerlinCalendarDayPrice</td>\n",
       "      <td>NaN</td>\n",
       "      <td>A.1 New 1BR villa with bathtub and private pool</td>\n",
       "      <td>Badung</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>MerlinCalendarDay</td>\n",
       "      <td>2022-11-03</td>\n",
       "      <td>False</td>\n",
       "      <td>1125</td>\n",
       "      <td>1</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>MerlinCalendarDayPrice</td>\n",
       "      <td>NaN</td>\n",
       "      <td>A.1 New 1BR villa with bathtub and private pool</td>\n",
       "      <td>Badung</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>MerlinCalendarDay</td>\n",
       "      <td>2022-11-04</td>\n",
       "      <td>False</td>\n",
       "      <td>1125</td>\n",
       "      <td>1</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>MerlinCalendarDayPrice</td>\n",
       "      <td>NaN</td>\n",
       "      <td>A.1 New 1BR villa with bathtub and private pool</td>\n",
       "      <td>Badung</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>MerlinCalendarDay</td>\n",
       "      <td>2022-11-05</td>\n",
       "      <td>False</td>\n",
       "      <td>1125</td>\n",
       "      <td>1</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>MerlinCalendarDayPrice</td>\n",
       "      <td>NaN</td>\n",
       "      <td>A.1 New 1BR villa with bathtub and private pool</td>\n",
       "      <td>Badung</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>60586</th>\n",
       "      <td>26</td>\n",
       "      <td>MerlinCalendarDay</td>\n",
       "      <td>2023-10-27</td>\n",
       "      <td>False</td>\n",
       "      <td>1125</td>\n",
       "      <td>3</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>MerlinCalendarDayPrice</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Sleep Under a Dreamy Canopy at a Traditional T...</td>\n",
       "      <td>Denpasar</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>60587</th>\n",
       "      <td>27</td>\n",
       "      <td>MerlinCalendarDay</td>\n",
       "      <td>2023-10-28</td>\n",
       "      <td>False</td>\n",
       "      <td>1125</td>\n",
       "      <td>3</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>MerlinCalendarDayPrice</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Sleep Under a Dreamy Canopy at a Traditional T...</td>\n",
       "      <td>Denpasar</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>60588</th>\n",
       "      <td>28</td>\n",
       "      <td>MerlinCalendarDay</td>\n",
       "      <td>2023-10-29</td>\n",
       "      <td>False</td>\n",
       "      <td>1125</td>\n",
       "      <td>3</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>MerlinCalendarDayPrice</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Sleep Under a Dreamy Canopy at a Traditional T...</td>\n",
       "      <td>Denpasar</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>60589</th>\n",
       "      <td>29</td>\n",
       "      <td>MerlinCalendarDay</td>\n",
       "      <td>2023-10-30</td>\n",
       "      <td>False</td>\n",
       "      <td>1125</td>\n",
       "      <td>3</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>MerlinCalendarDayPrice</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Sleep Under a Dreamy Canopy at a Traditional T...</td>\n",
       "      <td>Denpasar</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>60590</th>\n",
       "      <td>30</td>\n",
       "      <td>MerlinCalendarDay</td>\n",
       "      <td>2023-10-31</td>\n",
       "      <td>False</td>\n",
       "      <td>1125</td>\n",
       "      <td>3</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>MerlinCalendarDayPrice</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Sleep Under a Dreamy Canopy at a Traditional T...</td>\n",
       "      <td>Denpasar</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>60591 rows Ã— 13 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       Unnamed: 0         __typename calendarDate  available  maxNights  \\\n",
       "0               0  MerlinCalendarDay   2022-11-01      False       1125   \n",
       "1               1  MerlinCalendarDay   2022-11-02       True       1125   \n",
       "2               2  MerlinCalendarDay   2022-11-03      False       1125   \n",
       "3               3  MerlinCalendarDay   2022-11-04      False       1125   \n",
       "4               4  MerlinCalendarDay   2022-11-05      False       1125   \n",
       "...           ...                ...          ...        ...        ...   \n",
       "60586          26  MerlinCalendarDay   2023-10-27      False       1125   \n",
       "60587          27  MerlinCalendarDay   2023-10-28      False       1125   \n",
       "60588          28  MerlinCalendarDay   2023-10-29      False       1125   \n",
       "60589          29  MerlinCalendarDay   2023-10-30      False       1125   \n",
       "60590          30  MerlinCalendarDay   2023-10-31      False       1125   \n",
       "\n",
       "       minNights  availableForCheckin  availableForCheckout  bookable  \\\n",
       "0              1                False                  True     False   \n",
       "1              1                 True                 False      True   \n",
       "2              1                False                  True     False   \n",
       "3              1                False                 False     False   \n",
       "4              1                False                 False     False   \n",
       "...          ...                  ...                   ...       ...   \n",
       "60586          3                False                  True     False   \n",
       "60587          3                False                 False     False   \n",
       "60588          3                False                 False     False   \n",
       "60589          3                False                 False     False   \n",
       "60590          3                False                 False     False   \n",
       "\n",
       "             price.__typename  price.localPriceFormatted  \\\n",
       "0      MerlinCalendarDayPrice                        NaN   \n",
       "1      MerlinCalendarDayPrice                        NaN   \n",
       "2      MerlinCalendarDayPrice                        NaN   \n",
       "3      MerlinCalendarDayPrice                        NaN   \n",
       "4      MerlinCalendarDayPrice                        NaN   \n",
       "...                       ...                        ...   \n",
       "60586  MerlinCalendarDayPrice                        NaN   \n",
       "60587  MerlinCalendarDayPrice                        NaN   \n",
       "60588  MerlinCalendarDayPrice                        NaN   \n",
       "60589  MerlinCalendarDayPrice                        NaN   \n",
       "60590  MerlinCalendarDayPrice                        NaN   \n",
       "\n",
       "                                           Property Name    Region  \n",
       "0        A.1 New 1BR villa with bathtub and private pool    Badung  \n",
       "1        A.1 New 1BR villa with bathtub and private pool    Badung  \n",
       "2        A.1 New 1BR villa with bathtub and private pool    Badung  \n",
       "3        A.1 New 1BR villa with bathtub and private pool    Badung  \n",
       "4        A.1 New 1BR villa with bathtub and private pool    Badung  \n",
       "...                                                  ...       ...  \n",
       "60586  Sleep Under a Dreamy Canopy at a Traditional T...  Denpasar  \n",
       "60587  Sleep Under a Dreamy Canopy at a Traditional T...  Denpasar  \n",
       "60588  Sleep Under a Dreamy Canopy at a Traditional T...  Denpasar  \n",
       "60589  Sleep Under a Dreamy Canopy at a Traditional T...  Denpasar  \n",
       "60590  Sleep Under a Dreamy Canopy at a Traditional T...  Denpasar  \n",
       "\n",
       "[60591 rows x 13 columns]"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_prop"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 60591 entries, 0 to 60590\n",
      "Data columns (total 13 columns):\n",
      " #   Column                     Non-Null Count  Dtype  \n",
      "---  ------                     --------------  -----  \n",
      " 0   Unnamed: 0                 60591 non-null  int64  \n",
      " 1   __typename                 60591 non-null  object \n",
      " 2   calendarDate               60591 non-null  object \n",
      " 3   available                  60591 non-null  bool   \n",
      " 4   maxNights                  60591 non-null  int64  \n",
      " 5   minNights                  60591 non-null  int64  \n",
      " 6   availableForCheckin        60591 non-null  bool   \n",
      " 7   availableForCheckout       60591 non-null  bool   \n",
      " 8   bookable                   60591 non-null  bool   \n",
      " 9   price.__typename           60591 non-null  object \n",
      " 10  price.localPriceFormatted  0 non-null      float64\n",
      " 11  Property Name              60591 non-null  object \n",
      " 12  Region                     60591 non-null  object \n",
      "dtypes: bool(4), float64(1), int64(3), object(5)\n",
      "memory usage: 4.4+ MB\n"
     ]
    }
   ],
   "source": [
    "df_prop.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# PREPROCESSING"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_prop['calendarDate'] = pd.to_datetime(df_prop['calendarDate'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "60591"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(df_prop)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "#main purpose: to get the availability rate\n",
    "#this stage do make 2 new columns to extract available & non available property in 1 day\n",
    "TRUE_avail = []\n",
    "FALSE_avail = []\n",
    "\n",
    "for row in df_prop['available']:\n",
    "    if row == True:\n",
    "        TRUE_avail.append(1)\n",
    "    else:\n",
    "        TRUE_avail.append(0)\n",
    "\n",
    "for row in df_prop['available']:\n",
    "    if row == False:\n",
    "        FALSE_avail.append(1)\n",
    "    else:\n",
    "        FALSE_avail.append(0)\n",
    "    \n",
    "df_prop['TRUE_avail'] = TRUE_avail\n",
    "df_prop['FALSE_avail'] = FALSE_avail"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Unnamed: 0</th>\n",
       "      <th>__typename</th>\n",
       "      <th>calendarDate</th>\n",
       "      <th>available</th>\n",
       "      <th>maxNights</th>\n",
       "      <th>minNights</th>\n",
       "      <th>availableForCheckin</th>\n",
       "      <th>availableForCheckout</th>\n",
       "      <th>bookable</th>\n",
       "      <th>price.__typename</th>\n",
       "      <th>price.localPriceFormatted</th>\n",
       "      <th>Property Name</th>\n",
       "      <th>Region</th>\n",
       "      <th>TRUE_avail</th>\n",
       "      <th>FALSE_avail</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>MerlinCalendarDay</td>\n",
       "      <td>2022-11-01</td>\n",
       "      <td>False</td>\n",
       "      <td>1125</td>\n",
       "      <td>1</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>MerlinCalendarDayPrice</td>\n",
       "      <td>NaN</td>\n",
       "      <td>A.1 New 1BR villa with bathtub and private pool</td>\n",
       "      <td>Badung</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>MerlinCalendarDay</td>\n",
       "      <td>2022-11-02</td>\n",
       "      <td>True</td>\n",
       "      <td>1125</td>\n",
       "      <td>1</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>MerlinCalendarDayPrice</td>\n",
       "      <td>NaN</td>\n",
       "      <td>A.1 New 1BR villa with bathtub and private pool</td>\n",
       "      <td>Badung</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>MerlinCalendarDay</td>\n",
       "      <td>2022-11-03</td>\n",
       "      <td>False</td>\n",
       "      <td>1125</td>\n",
       "      <td>1</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>MerlinCalendarDayPrice</td>\n",
       "      <td>NaN</td>\n",
       "      <td>A.1 New 1BR villa with bathtub and private pool</td>\n",
       "      <td>Badung</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>MerlinCalendarDay</td>\n",
       "      <td>2022-11-04</td>\n",
       "      <td>False</td>\n",
       "      <td>1125</td>\n",
       "      <td>1</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>MerlinCalendarDayPrice</td>\n",
       "      <td>NaN</td>\n",
       "      <td>A.1 New 1BR villa with bathtub and private pool</td>\n",
       "      <td>Badung</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>MerlinCalendarDay</td>\n",
       "      <td>2022-11-05</td>\n",
       "      <td>False</td>\n",
       "      <td>1125</td>\n",
       "      <td>1</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>MerlinCalendarDayPrice</td>\n",
       "      <td>NaN</td>\n",
       "      <td>A.1 New 1BR villa with bathtub and private pool</td>\n",
       "      <td>Badung</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Unnamed: 0         __typename calendarDate  available  maxNights  \\\n",
       "0           0  MerlinCalendarDay   2022-11-01      False       1125   \n",
       "1           1  MerlinCalendarDay   2022-11-02       True       1125   \n",
       "2           2  MerlinCalendarDay   2022-11-03      False       1125   \n",
       "3           3  MerlinCalendarDay   2022-11-04      False       1125   \n",
       "4           4  MerlinCalendarDay   2022-11-05      False       1125   \n",
       "\n",
       "   minNights  availableForCheckin  availableForCheckout  bookable  \\\n",
       "0          1                False                  True     False   \n",
       "1          1                 True                 False      True   \n",
       "2          1                False                  True     False   \n",
       "3          1                False                 False     False   \n",
       "4          1                False                 False     False   \n",
       "\n",
       "         price.__typename  price.localPriceFormatted  \\\n",
       "0  MerlinCalendarDayPrice                        NaN   \n",
       "1  MerlinCalendarDayPrice                        NaN   \n",
       "2  MerlinCalendarDayPrice                        NaN   \n",
       "3  MerlinCalendarDayPrice                        NaN   \n",
       "4  MerlinCalendarDayPrice                        NaN   \n",
       "\n",
       "                                     Property Name  Region  TRUE_avail  \\\n",
       "0  A.1 New 1BR villa with bathtub and private pool  Badung           0   \n",
       "1  A.1 New 1BR villa with bathtub and private pool  Badung           1   \n",
       "2  A.1 New 1BR villa with bathtub and private pool  Badung           0   \n",
       "3  A.1 New 1BR villa with bathtub and private pool  Badung           0   \n",
       "4  A.1 New 1BR villa with bathtub and private pool  Badung           0   \n",
       "\n",
       "   FALSE_avail  \n",
       "0            1  \n",
       "1            0  \n",
       "2            1  \n",
       "3            1  \n",
       "4            1  "
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_prop.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_propname = df_prop.groupby(df_prop['calendarDate']).sum()[:365].reset_index()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "ls_TotalProp = []\n",
    "ls_Availability = []\n",
    "\n",
    "for i in range(len(df_propname)):\n",
    "    x = df_propname['TRUE_avail'][i]+df_propname['FALSE_avail'][i]\n",
    "    ls_TotalProp.append(x)\n",
    "    \n",
    "for j in range(len(df_propname)):\n",
    "    y = df_propname['FALSE_avail'][j]*100/(df_propname['TRUE_avail'][j]+df_propname['FALSE_avail'][j])\n",
    "    ls_Availability.append(y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_propname['TotalProp'] = ls_TotalProp\n",
    "df_propname['%Availability'] = ls_Availability"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>calendarDate</th>\n",
       "      <th>Unnamed: 0</th>\n",
       "      <th>available</th>\n",
       "      <th>maxNights</th>\n",
       "      <th>minNights</th>\n",
       "      <th>availableForCheckin</th>\n",
       "      <th>availableForCheckout</th>\n",
       "      <th>bookable</th>\n",
       "      <th>price.localPriceFormatted</th>\n",
       "      <th>TRUE_avail</th>\n",
       "      <th>FALSE_avail</th>\n",
       "      <th>TotalProp</th>\n",
       "      <th>%Availability</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2022-11-01</td>\n",
       "      <td>0</td>\n",
       "      <td>64</td>\n",
       "      <td>131911</td>\n",
       "      <td>256</td>\n",
       "      <td>59</td>\n",
       "      <td>62</td>\n",
       "      <td>62</td>\n",
       "      <td>0.0</td>\n",
       "      <td>64</td>\n",
       "      <td>101</td>\n",
       "      <td>165</td>\n",
       "      <td>61.212121</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2022-11-02</td>\n",
       "      <td>165</td>\n",
       "      <td>59</td>\n",
       "      <td>131911</td>\n",
       "      <td>253</td>\n",
       "      <td>54</td>\n",
       "      <td>62</td>\n",
       "      <td>58</td>\n",
       "      <td>0.0</td>\n",
       "      <td>59</td>\n",
       "      <td>106</td>\n",
       "      <td>165</td>\n",
       "      <td>64.242424</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2022-11-03</td>\n",
       "      <td>330</td>\n",
       "      <td>59</td>\n",
       "      <td>131911</td>\n",
       "      <td>253</td>\n",
       "      <td>56</td>\n",
       "      <td>58</td>\n",
       "      <td>59</td>\n",
       "      <td>0.0</td>\n",
       "      <td>59</td>\n",
       "      <td>106</td>\n",
       "      <td>165</td>\n",
       "      <td>64.242424</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2022-11-04</td>\n",
       "      <td>495</td>\n",
       "      <td>67</td>\n",
       "      <td>131911</td>\n",
       "      <td>262</td>\n",
       "      <td>61</td>\n",
       "      <td>59</td>\n",
       "      <td>65</td>\n",
       "      <td>0.0</td>\n",
       "      <td>67</td>\n",
       "      <td>98</td>\n",
       "      <td>165</td>\n",
       "      <td>59.393939</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2022-11-05</td>\n",
       "      <td>660</td>\n",
       "      <td>65</td>\n",
       "      <td>131911</td>\n",
       "      <td>262</td>\n",
       "      <td>62</td>\n",
       "      <td>65</td>\n",
       "      <td>62</td>\n",
       "      <td>0.0</td>\n",
       "      <td>65</td>\n",
       "      <td>100</td>\n",
       "      <td>165</td>\n",
       "      <td>60.606061</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  calendarDate  Unnamed: 0  available  maxNights  minNights  \\\n",
       "0   2022-11-01           0         64     131911        256   \n",
       "1   2022-11-02         165         59     131911        253   \n",
       "2   2022-11-03         330         59     131911        253   \n",
       "3   2022-11-04         495         67     131911        262   \n",
       "4   2022-11-05         660         65     131911        262   \n",
       "\n",
       "   availableForCheckin  availableForCheckout  bookable  \\\n",
       "0                   59                    62        62   \n",
       "1                   54                    62        58   \n",
       "2                   56                    58        59   \n",
       "3                   61                    59        65   \n",
       "4                   62                    65        62   \n",
       "\n",
       "   price.localPriceFormatted  TRUE_avail  FALSE_avail  TotalProp  \\\n",
       "0                        0.0          64          101        165   \n",
       "1                        0.0          59          106        165   \n",
       "2                        0.0          59          106        165   \n",
       "3                        0.0          67           98        165   \n",
       "4                        0.0          65          100        165   \n",
       "\n",
       "   %Availability  \n",
       "0      61.212121  \n",
       "1      64.242424  \n",
       "2      64.242424  \n",
       "3      59.393939  \n",
       "4      60.606061  "
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_propname.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.8/site-packages/seaborn/distributions.py:2557: FutureWarning: `distplot` is a deprecated function and will be removed in a future version. Please adapt your code to use either `displot` (a figure-level function with similar flexibility) or `histplot` (an axes-level function for histograms).\n",
      "  warnings.warn(msg, FutureWarning)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='%Availability', ylabel='Density'>"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.distplot(df_propname['%Availability'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>calendarDate</th>\n",
       "      <th>%Availability</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2022-11-01</td>\n",
       "      <td>61.212121</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2022-11-02</td>\n",
       "      <td>64.242424</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2022-11-03</td>\n",
       "      <td>64.242424</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2022-11-04</td>\n",
       "      <td>59.393939</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2022-11-05</td>\n",
       "      <td>60.606061</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  calendarDate  %Availability\n",
       "0   2022-11-01      61.212121\n",
       "1   2022-11-02      64.242424\n",
       "2   2022-11-03      64.242424\n",
       "3   2022-11-04      59.393939\n",
       "4   2022-11-05      60.606061"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dataset = df_propname.drop(['Unnamed: 0',\n",
    "                           'available',\n",
    "                           'maxNights',\n",
    "                           'minNights',\n",
    "                           'availableForCheckin',\n",
    "                           'availableForCheckout',\n",
    "                           'bookable',\n",
    "                           'price.localPriceFormatted',\n",
    "                           'TRUE_avail',\n",
    "                           'FALSE_avail',\n",
    "                           'TotalProp'],\n",
    "                           axis=1)\n",
    "dataset.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='calendarDate'>"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "dataset.plot('calendarDate', '%Availability')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>calendarDate</th>\n",
       "      <th>%Availability</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2022-11-01</td>\n",
       "      <td>61.212121</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2022-11-02</td>\n",
       "      <td>64.242424</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2022-11-03</td>\n",
       "      <td>64.242424</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2022-11-04</td>\n",
       "      <td>59.393939</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2022-11-05</td>\n",
       "      <td>60.606061</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>360</th>\n",
       "      <td>2023-10-27</td>\n",
       "      <td>55.421687</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>361</th>\n",
       "      <td>2023-10-28</td>\n",
       "      <td>57.228916</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>362</th>\n",
       "      <td>2023-10-29</td>\n",
       "      <td>57.228916</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>363</th>\n",
       "      <td>2023-10-30</td>\n",
       "      <td>57.228916</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>364</th>\n",
       "      <td>2023-10-31</td>\n",
       "      <td>57.228916</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>365 rows Ã— 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "    calendarDate  %Availability\n",
       "0     2022-11-01      61.212121\n",
       "1     2022-11-02      64.242424\n",
       "2     2022-11-03      64.242424\n",
       "3     2022-11-04      59.393939\n",
       "4     2022-11-05      60.606061\n",
       "..           ...            ...\n",
       "360   2023-10-27      55.421687\n",
       "361   2023-10-28      57.228916\n",
       "362   2023-10-29      57.228916\n",
       "363   2023-10-30      57.228916\n",
       "364   2023-10-31      57.228916\n",
       "\n",
       "[365 rows x 2 columns]"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import pandas as pd\n",
    "import tensorflow as tf\n",
    "from tensorflow.keras.models import Sequential\n",
    "from tensorflow.keras.layers import Dense\n",
    "from tensorflow.keras.layers import LSTM\n",
    "from sklearn.preprocessing import MinMaxScaler\n",
    "from sklearn.metrics import mean_squared_error"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "# fix random seed for reproducibility\n",
    "seed = tf.random.set_seed(7)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>%Availability</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>61.212121</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>64.242424</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>64.242424</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>59.393939</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>60.606061</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   %Availability\n",
       "0      61.212121\n",
       "1      64.242424\n",
       "2      64.242424\n",
       "3      59.393939\n",
       "4      60.606061"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dataset_univar = dataset.drop(['calendarDate'], axis=1)\n",
    "dataset_univar.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 365 entries, 0 to 364\n",
      "Data columns (total 1 columns):\n",
      " #   Column         Non-Null Count  Dtype  \n",
      "---  ------         --------------  -----  \n",
      " 0   %Availability  365 non-null    float64\n",
      "dtypes: float64(1)\n",
      "memory usage: 3.0 KB\n"
     ]
    }
   ],
   "source": [
    "dataset_univar.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(365, 1)"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dataset_univar.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Split Data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "# split into train and test sets\n",
    "train_size = int(len(dataset_univar) * 0.80)\n",
    "test_size = len(dataset_univar) - train_size"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "292 73\n"
     ]
    }
   ],
   "source": [
    "train = dataset_univar[:train_size]\n",
    "test = dataset_univar[train_size:len(dataset_univar)]\n",
    "print(len(train), len(test))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>%Availability</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>61.212121</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>64.242424</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>64.242424</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>59.393939</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>60.606061</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   %Availability\n",
       "0      61.212121\n",
       "1      64.242424\n",
       "2      64.242424\n",
       "3      59.393939\n",
       "4      60.606061"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>%Availability</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>292</th>\n",
       "      <td>30.120482</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>293</th>\n",
       "      <td>30.120482</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>294</th>\n",
       "      <td>30.120482</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>295</th>\n",
       "      <td>30.722892</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>296</th>\n",
       "      <td>29.518072</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     %Availability\n",
       "292      30.120482\n",
       "293      30.120482\n",
       "294      30.120482\n",
       "295      30.722892\n",
       "296      29.518072"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [],
   "source": [
    "train = train['%Availability'].values\n",
    "train = train.astype('float32')\n",
    "\n",
    "test = test['%Availability'].values\n",
    "test = test.astype('float32')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [],
   "source": [
    "# normalize train data\n",
    "train = train.reshape(-1,1)\n",
    "scaler = MinMaxScaler(feature_range=(0, 1))\n",
    "train = scaler.fit_transform(train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [],
   "source": [
    "# normalize test data\n",
    "test = test.reshape(-1,1)\n",
    "scaler = MinMaxScaler(feature_range=(0, 1))\n",
    "test = scaler.fit_transform(test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "292 73\n"
     ]
    }
   ],
   "source": [
    "train_size = len(train)\n",
    "test_size = len(test)\n",
    "print(len(train), len(test))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [],
   "source": [
    "# convert an array of values into a dataset matrix\n",
    "def create_dataset(dataset_univar, look_back):\n",
    "    dataX, dataY = [], []\n",
    "    for i in range(len(dataset_univar)-look_back-1):\n",
    "        a = dataset_univar[i:(i+look_back), 0]\n",
    "        dataX.append(a)\n",
    "        dataY.append(dataset_univar[i + look_back, 0])\n",
    "    return np.array(dataX), np.array(dataY)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(292, 1)\n",
      "(73, 1)\n"
     ]
    }
   ],
   "source": [
    "print(train.shape)\n",
    "print(test.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Non Window Method\n",
    "look_back = 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Window Method\n",
    "look_back = 5"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [],
   "source": [
    "# reshape into X=t and Y=t+1 or Y=t+3 (Window Method-based)\n",
    "trainX, trainY = create_dataset(train, look_back)\n",
    "testX, testY = create_dataset(test, look_back)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [],
   "source": [
    "# reshape input to be [samples, time steps, features]\n",
    "trainX = np.reshape(trainX, (trainX.shape[0], 1, trainX.shape[1]))\n",
    "testX = np.reshape(testX, (testX.shape[0], 1, testX.shape[1]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [],
   "source": [
    "from keras.callbacks import ModelCheckpoint, EarlyStopping"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Vanilla LSTM, unit = 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [],
   "source": [
    "model_lstm = Sequential()\n",
    "model_lstm.add(LSTM(1, input_shape=(1, look_back)))\n",
    "model_lstm.add(Dense(1))\n",
    "model_lstm.compile(loss='mean_squared_error', optimizer='adam')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "290/290 - 2s - loss: 0.0604 - 2s/epoch - 7ms/step\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<keras.callbacks.History at 0x1562cc7f0>"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model_lstm.fit(trainX, trainY, callbacks=[EarlyStopping(monitor='loss', patience=2),\n",
    "                                     ModelCheckpoint(filepath='best_model_lstm.h5',\n",
    "                                                     monitor='loss',\n",
    "                                                     save_best_only=True)],\n",
    "          batch_size=1,\n",
    "          verbose=2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"sequential\"\n",
      "_________________________________________________________________\n",
      " Layer (type)                Output Shape              Param #   \n",
      "=================================================================\n",
      " lstm (LSTM)                 (None, 1)                 12        \n",
      "                                                                 \n",
      " dense (Dense)               (None, 1)                 2         \n",
      "                                                                 \n",
      "=================================================================\n",
      "Total params: 14\n",
      "Trainable params: 14\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    }
   ],
   "source": [
    "model_lstm.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "10/10 [==============================] - 1s 2ms/step\n",
      "3/3 [==============================] - 0s 3ms/step\n"
     ]
    }
   ],
   "source": [
    "# make predictions\n",
    "trainPredict = model_lstm.predict(trainX)\n",
    "testPredict = model_lstm.predict(testX)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train Score: 6.60 RMSE\n",
      "Test Score: 7.40 RMSE\n"
     ]
    }
   ],
   "source": [
    "# invert predictions\n",
    "trainPredict = scaler.inverse_transform(trainPredict)\n",
    "trainY = scaler.inverse_transform([trainY])\n",
    "testPredict = scaler.inverse_transform(testPredict)\n",
    "testY = scaler.inverse_transform([testY])\n",
    "# calculate root mean squared error\n",
    "trainScore = np.sqrt(mean_squared_error(trainY[0], trainPredict[:,0]))\n",
    "print('Train Score: %.2f RMSE' % (trainScore))\n",
    "testScore = np.sqrt(mean_squared_error(testY[0], testPredict[:,0]))\n",
    "print('Test Score: %.2f RMSE' % (testScore))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "MAE: 5.965039506913082\n",
      "MSE: 54.82899430362803\n",
      "RMSE: 7.4046603098067925\n"
     ]
    }
   ],
   "source": [
    "from sklearn import metrics\n",
    "\n",
    "print('MAE:', metrics.mean_absolute_error(testY[0], testPredict[:,0]))\n",
    "print('MSE:', metrics.mean_squared_error(testY[0], testPredict[:,0]))\n",
    "print('RMSE:', np.sqrt(metrics.mean_squared_error(testY[0], testPredict[:,0])))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Vanilla LSTM, unit = 2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "290/290 - 2s - loss: 0.0616 - 2s/epoch - 7ms/step\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<keras.callbacks.History at 0x152569ac0>"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model_lstm = Sequential()\n",
    "model_lstm.add(LSTM(2, input_shape=(1, look_back)))\n",
    "model_lstm.add(Dense(1))\n",
    "model_lstm.compile(loss='mean_squared_error', optimizer='adam')\n",
    "\n",
    "model_lstm.fit(trainX, trainY, callbacks=[EarlyStopping(monitor='loss', patience=2),\n",
    "                                     ModelCheckpoint(filepath='best_model_lstm.h5',\n",
    "                                                     monitor='loss',\n",
    "                                                     save_best_only=True)],\n",
    "          batch_size=1,\n",
    "          verbose=2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"sequential\"\n",
      "_________________________________________________________________\n",
      " Layer (type)                Output Shape              Param #   \n",
      "=================================================================\n",
      " lstm (LSTM)                 (None, 2)                 32        \n",
      "                                                                 \n",
      " dense (Dense)               (None, 1)                 3         \n",
      "                                                                 \n",
      "=================================================================\n",
      "Total params: 35\n",
      "Trainable params: 35\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    }
   ],
   "source": [
    "model_lstm.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "10/10 [==============================] - 1s 2ms/step\n",
      "3/3 [==============================] - 0s 2ms/step\n"
     ]
    }
   ],
   "source": [
    "# make predictions\n",
    "trainPredict = model_lstm.predict(trainX)\n",
    "testPredict = model_lstm.predict(testX)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train Score: 6.08 RMSE\n",
      "Test Score: 7.07 RMSE\n"
     ]
    }
   ],
   "source": [
    "# invert predictions\n",
    "trainPredict = scaler.inverse_transform(trainPredict)\n",
    "trainY = scaler.inverse_transform([trainY])\n",
    "testPredict = scaler.inverse_transform(testPredict)\n",
    "testY = scaler.inverse_transform([testY])\n",
    "# calculate root mean squared error\n",
    "trainScore = np.sqrt(mean_squared_error(trainY[0], trainPredict[:,0]))\n",
    "print('Train Score: %.2f RMSE' % (trainScore))\n",
    "testScore = np.sqrt(mean_squared_error(testY[0], testPredict[:,0]))\n",
    "print('Test Score: %.2f RMSE' % (testScore))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "MAE: 5.8034534976323\n",
      "MSE: 49.95451098197202\n",
      "RMSE: 7.067850520630159\n"
     ]
    }
   ],
   "source": [
    "from sklearn import metrics\n",
    "\n",
    "print('MAE:', metrics.mean_absolute_error(testY[0], testPredict[:,0]))\n",
    "print('MSE:', metrics.mean_squared_error(testY[0], testPredict[:,0]))\n",
    "print('RMSE:', np.sqrt(metrics.mean_squared_error(testY[0], testPredict[:,0])))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Vanilla LSTM, unit = 3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "290/290 - 2s - loss: 0.0547 - 2s/epoch - 7ms/step\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<keras.callbacks.History at 0x159548ac0>"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model_lstm = Sequential()\n",
    "model_lstm.add(LSTM(3, input_shape=(1, look_back)))\n",
    "model_lstm.add(Dense(1))\n",
    "model_lstm.compile(loss='mean_squared_error', optimizer='adam')\n",
    "\n",
    "model_lstm.fit(trainX, trainY, callbacks=[EarlyStopping(monitor='loss', patience=2),\n",
    "                                     ModelCheckpoint(filepath='best_model_lstm.h5',\n",
    "                                                     monitor='loss',\n",
    "                                                     save_best_only=True)],\n",
    "          batch_size=1,\n",
    "          verbose=2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"sequential\"\n",
      "_________________________________________________________________\n",
      " Layer (type)                Output Shape              Param #   \n",
      "=================================================================\n",
      " lstm (LSTM)                 (None, 3)                 60        \n",
      "                                                                 \n",
      " dense (Dense)               (None, 1)                 4         \n",
      "                                                                 \n",
      "=================================================================\n",
      "Total params: 64\n",
      "Trainable params: 64\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    }
   ],
   "source": [
    "model_lstm.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "10/10 [==============================] - 1s 2ms/step\n",
      "3/3 [==============================] - 0s 3ms/step\n"
     ]
    }
   ],
   "source": [
    "# make predictions\n",
    "trainPredict = model_lstm.predict(trainX)\n",
    "testPredict = model_lstm.predict(testX)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train Score: 5.83 RMSE\n",
      "Test Score: 7.33 RMSE\n"
     ]
    }
   ],
   "source": [
    "# invert predictions\n",
    "trainPredict = scaler.inverse_transform(trainPredict)\n",
    "trainY = scaler.inverse_transform([trainY])\n",
    "testPredict = scaler.inverse_transform(testPredict)\n",
    "testY = scaler.inverse_transform([testY])\n",
    "# calculate root mean squared error\n",
    "trainScore = np.sqrt(mean_squared_error(trainY[0], trainPredict[:,0]))\n",
    "print('Train Score: %.2f RMSE' % (trainScore))\n",
    "testScore = np.sqrt(mean_squared_error(testY[0], testPredict[:,0]))\n",
    "print('Test Score: %.2f RMSE' % (testScore))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "MAE: 6.3396637323683525\n",
      "MSE: 53.76992612247662\n",
      "RMSE: 7.3327979736575735\n"
     ]
    }
   ],
   "source": [
    "from sklearn import metrics\n",
    "\n",
    "print('MAE:', metrics.mean_absolute_error(testY[0], testPredict[:,0]))\n",
    "print('MSE:', metrics.mean_squared_error(testY[0], testPredict[:,0]))\n",
    "print('RMSE:', np.sqrt(metrics.mean_squared_error(testY[0], testPredict[:,0])))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Vanilla LSTM, unit = 4"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [],
   "source": [
    "model_lstm = Sequential()\n",
    "model_lstm.add(LSTM(4, input_shape=(1, look_back)))\n",
    "model_lstm.add(Dense(1))\n",
    "model_lstm.compile(loss='mean_squared_error', optimizer='adam')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "290/290 - 2s - loss: 0.0389 - 2s/epoch - 7ms/step\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<keras.callbacks.History at 0x158506790>"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model_lstm.fit(trainX, trainY, callbacks=[EarlyStopping(monitor='loss', patience=2),\n",
    "                                     ModelCheckpoint(filepath='best_model_lstm.h5',\n",
    "                                                     monitor='loss',\n",
    "                                                     save_best_only=True)],\n",
    "          batch_size=1,\n",
    "          verbose=2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"sequential\"\n",
      "_________________________________________________________________\n",
      " Layer (type)                Output Shape              Param #   \n",
      "=================================================================\n",
      " lstm (LSTM)                 (None, 4)                 96        \n",
      "                                                                 \n",
      " dense (Dense)               (None, 1)                 5         \n",
      "                                                                 \n",
      "=================================================================\n",
      "Total params: 101\n",
      "Trainable params: 101\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    }
   ],
   "source": [
    "model_lstm.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "10/10 [==============================] - 1s 2ms/step\n",
      "3/3 [==============================] - 0s 3ms/step\n"
     ]
    }
   ],
   "source": [
    "# make predictions\n",
    "trainPredict = model_lstm.predict(trainX)\n",
    "testPredict = model_lstm.predict(testX)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train Score: 4.65 RMSE\n",
      "Test Score: 6.57 RMSE\n"
     ]
    }
   ],
   "source": [
    "# invert predictions\n",
    "trainPredict = scaler.inverse_transform(trainPredict)\n",
    "trainY = scaler.inverse_transform([trainY])\n",
    "testPredict = scaler.inverse_transform(testPredict)\n",
    "testY = scaler.inverse_transform([testY])\n",
    "# calculate root mean squared error\n",
    "trainScore = np.sqrt(mean_squared_error(trainY[0], trainPredict[:,0]))\n",
    "print('Train Score: %.2f RMSE' % (trainScore))\n",
    "testScore = np.sqrt(mean_squared_error(testY[0], testPredict[:,0]))\n",
    "print('Test Score: %.2f RMSE' % (testScore))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "MAE: 5.823786962348821\n",
      "MSE: 43.19427923805926\n",
      "RMSE: 6.57223548254772\n"
     ]
    }
   ],
   "source": [
    "from sklearn import metrics\n",
    "\n",
    "print('MAE:', metrics.mean_absolute_error(testY[0], testPredict[:,0]))\n",
    "print('MSE:', metrics.mean_squared_error(testY[0], testPredict[:,0]))\n",
    "print('RMSE:', np.sqrt(metrics.mean_squared_error(testY[0], testPredict[:,0])))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# shift train predictions for plotting\n",
    "trainPredictPlot = np.empty_like(dataset_univar)\n",
    "trainPredictPlot[:, :] = np.nan\n",
    "trainPredictPlot[look_back:len(trainPredict)+look_back, :] = trainPredict\n",
    "# shift test predictions for plotting\n",
    "testPredictPlot = np.empty_like(dataset_univar)\n",
    "testPredictPlot[:, :] = np.nan\n",
    "testPredictPlot[len(trainPredict)+(look_back*2)+1:len(dataset)-1, :] = testPredict\n",
    "# plot baseline and predictions\n",
    "plt.plot(trainPredictPlot)\n",
    "plt.plot(testPredictPlot)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Vanilla LSTM, unit = 5"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "290/290 - 2s - loss: 0.0531 - 2s/epoch - 7ms/step\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<keras.callbacks.History at 0x14bca8670>"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model_lstm = Sequential()\n",
    "model_lstm.add(LSTM(5, input_shape=(1, look_back)))\n",
    "model_lstm.add(Dense(1))\n",
    "model_lstm.compile(loss='mean_squared_error', optimizer='adam')\n",
    "\n",
    "model_lstm.fit(trainX, trainY, callbacks=[EarlyStopping(monitor='loss', patience=2),\n",
    "                                     ModelCheckpoint(filepath='best_model_lstm.h5',\n",
    "                                                     monitor='loss',\n",
    "                                                     save_best_only=True)],\n",
    "          batch_size=1,\n",
    "          verbose=2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"sequential\"\n",
      "_________________________________________________________________\n",
      " Layer (type)                Output Shape              Param #   \n",
      "=================================================================\n",
      " lstm (LSTM)                 (None, 5)                 140       \n",
      "                                                                 \n",
      " dense (Dense)               (None, 1)                 6         \n",
      "                                                                 \n",
      "=================================================================\n",
      "Total params: 146\n",
      "Trainable params: 146\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    }
   ],
   "source": [
    "model_lstm.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "10/10 [==============================] - 1s 2ms/step\n",
      "3/3 [==============================] - 0s 3ms/step\n"
     ]
    }
   ],
   "source": [
    "# make predictions\n",
    "trainPredict = model_lstm.predict(trainX)\n",
    "testPredict = model_lstm.predict(testX)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train Score: 5.30 RMSE\n",
      "Test Score: 7.42 RMSE\n"
     ]
    }
   ],
   "source": [
    "# invert predictions\n",
    "trainPredict = scaler.inverse_transform(trainPredict)\n",
    "trainY = scaler.inverse_transform([trainY])\n",
    "testPredict = scaler.inverse_transform(testPredict)\n",
    "testY = scaler.inverse_transform([testY])\n",
    "# calculate root mean squared error\n",
    "trainScore = np.sqrt(mean_squared_error(trainY[0], trainPredict[:,0]))\n",
    "print('Train Score: %.2f RMSE' % (trainScore))\n",
    "testScore = np.sqrt(mean_squared_error(testY[0], testPredict[:,0]))\n",
    "print('Test Score: %.2f RMSE' % (testScore))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "MAE: 6.754674480143579\n",
      "MSE: 55.05656995242121\n",
      "RMSE: 7.420011452310651\n"
     ]
    }
   ],
   "source": [
    "from sklearn import metrics\n",
    "\n",
    "print('MAE:', metrics.mean_absolute_error(testY[0], testPredict[:,0]))\n",
    "print('MSE:', metrics.mean_squared_error(testY[0], testPredict[:,0]))\n",
    "print('RMSE:', np.sqrt(metrics.mean_squared_error(testY[0], testPredict[:,0])))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Vanilla LSTM, unit = 6"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "290/290 - 2s - loss: 0.0533 - 2s/epoch - 9ms/step\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<keras.callbacks.History at 0x15ab8ab20>"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model_lstm = Sequential()\n",
    "model_lstm.add(LSTM(6, input_shape=(1, look_back)))\n",
    "model_lstm.add(Dense(1))\n",
    "model_lstm.compile(loss='mean_squared_error', optimizer='adam')\n",
    "\n",
    "model_lstm.fit(trainX, trainY, callbacks=[EarlyStopping(monitor='loss', patience=2),\n",
    "                                     ModelCheckpoint(filepath='best_model_lstm.h5',\n",
    "                                                     monitor='loss',\n",
    "                                                     save_best_only=True)],\n",
    "          batch_size=1,\n",
    "          verbose=2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"sequential\"\n",
      "_________________________________________________________________\n",
      " Layer (type)                Output Shape              Param #   \n",
      "=================================================================\n",
      " lstm (LSTM)                 (None, 6)                 192       \n",
      "                                                                 \n",
      " dense (Dense)               (None, 1)                 7         \n",
      "                                                                 \n",
      "=================================================================\n",
      "Total params: 199\n",
      "Trainable params: 199\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    }
   ],
   "source": [
    "model_lstm.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "10/10 [==============================] - 1s 15ms/step\n",
      "3/3 [==============================] - 0s 3ms/step\n"
     ]
    }
   ],
   "source": [
    "# make predictions\n",
    "trainPredict = model_lstm.predict(trainX)\n",
    "testPredict = model_lstm.predict(testX)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train Score: 5.46 RMSE\n",
      "Test Score: 7.50 RMSE\n"
     ]
    }
   ],
   "source": [
    "# invert predictions\n",
    "trainPredict = scaler.inverse_transform(trainPredict)\n",
    "trainY = scaler.inverse_transform([trainY])\n",
    "testPredict = scaler.inverse_transform(testPredict)\n",
    "testY = scaler.inverse_transform([testY])\n",
    "# calculate root mean squared error\n",
    "trainScore = np.sqrt(mean_squared_error(trainY[0], trainPredict[:,0]))\n",
    "print('Train Score: %.2f RMSE' % (trainScore))\n",
    "testScore = np.sqrt(mean_squared_error(testY[0], testPredict[:,0]))\n",
    "print('Test Score: %.2f RMSE' % (testScore))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "MAE: 6.788986661213396\n",
      "MSE: 56.22684146551923\n",
      "RMSE: 7.498455938759608\n"
     ]
    }
   ],
   "source": [
    "from sklearn import metrics\n",
    "\n",
    "print('MAE:', metrics.mean_absolute_error(testY[0], testPredict[:,0]))\n",
    "print('MSE:', metrics.mean_squared_error(testY[0], testPredict[:,0]))\n",
    "print('RMSE:', np.sqrt(metrics.mean_squared_error(testY[0], testPredict[:,0])))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Vanilla LSTM, unit = 7"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "290/290 - 2s - loss: 0.0651 - 2s/epoch - 7ms/step\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<keras.callbacks.History at 0x14cc04af0>"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model_lstm = Sequential()\n",
    "model_lstm.add(LSTM(7, input_shape=(1, look_back)))\n",
    "model_lstm.add(Dense(1))\n",
    "model_lstm.compile(loss='mean_squared_error', optimizer='adam')\n",
    "\n",
    "model_lstm.fit(trainX, trainY, callbacks=[EarlyStopping(monitor='loss', patience=2),\n",
    "                                     ModelCheckpoint(filepath='best_model_lstm.h5',\n",
    "                                                     monitor='loss',\n",
    "                                                     save_best_only=True)],\n",
    "          batch_size=1,\n",
    "          verbose=2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"sequential\"\n",
      "_________________________________________________________________\n",
      " Layer (type)                Output Shape              Param #   \n",
      "=================================================================\n",
      " lstm (LSTM)                 (None, 7)                 252       \n",
      "                                                                 \n",
      " dense (Dense)               (None, 1)                 8         \n",
      "                                                                 \n",
      "=================================================================\n",
      "Total params: 260\n",
      "Trainable params: 260\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    }
   ],
   "source": [
    "model_lstm.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "10/10 [==============================] - 1s 2ms/step\n",
      "3/3 [==============================] - 0s 7ms/step\n"
     ]
    }
   ],
   "source": [
    "# make predictions\n",
    "trainPredict = model_lstm.predict(trainX)\n",
    "testPredict = model_lstm.predict(testX)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train Score: 6.01 RMSE\n",
      "Test Score: 8.20 RMSE\n",
      "MAE: 7.514917640767477\n",
      "MSE: 67.19646893464106\n",
      "RMSE: 8.197345237004543\n"
     ]
    }
   ],
   "source": [
    "# invert predictions\n",
    "trainPredict = scaler.inverse_transform(trainPredict)\n",
    "trainY = scaler.inverse_transform([trainY])\n",
    "testPredict = scaler.inverse_transform(testPredict)\n",
    "testY = scaler.inverse_transform([testY])\n",
    "# calculate root mean squared error\n",
    "trainScore = np.sqrt(mean_squared_error(trainY[0], trainPredict[:,0]))\n",
    "print('Train Score: %.2f RMSE' % (trainScore))\n",
    "testScore = np.sqrt(mean_squared_error(testY[0], testPredict[:,0]))\n",
    "print('Test Score: %.2f RMSE' % (testScore))\n",
    "\n",
    "from sklearn import metrics\n",
    "\n",
    "print('MAE:', metrics.mean_absolute_error(testY[0], testPredict[:,0]))\n",
    "print('MSE:', metrics.mean_squared_error(testY[0], testPredict[:,0]))\n",
    "print('RMSE:', np.sqrt(metrics.mean_squared_error(testY[0], testPredict[:,0])))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Vanilla LSTM, unit = 8"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "290/290 - 2s - loss: 0.0590 - 2s/epoch - 7ms/step\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<keras.callbacks.History at 0x1591d7ac0>"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model_lstm = Sequential()\n",
    "model_lstm.add(LSTM(8, input_shape=(1, look_back)))\n",
    "model_lstm.add(Dense(1))\n",
    "model_lstm.compile(loss='mean_squared_error', optimizer='adam')\n",
    "\n",
    "model_lstm.fit(trainX, trainY, callbacks=[EarlyStopping(monitor='loss', patience=2),\n",
    "                                     ModelCheckpoint(filepath='best_model_lstm.h5',\n",
    "                                                     monitor='loss',\n",
    "                                                     save_best_only=True)],\n",
    "          batch_size=1,\n",
    "          verbose=2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"sequential\"\n",
      "_________________________________________________________________\n",
      " Layer (type)                Output Shape              Param #   \n",
      "=================================================================\n",
      " lstm (LSTM)                 (None, 8)                 320       \n",
      "                                                                 \n",
      " dense (Dense)               (None, 1)                 9         \n",
      "                                                                 \n",
      "=================================================================\n",
      "Total params: 329\n",
      "Trainable params: 329\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    }
   ],
   "source": [
    "model_lstm.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "10/10 [==============================] - 1s 2ms/step\n",
      "3/3 [==============================] - 0s 2ms/step\n"
     ]
    }
   ],
   "source": [
    "# make predictions\n",
    "trainPredict = model_lstm.predict(trainX)\n",
    "testPredict = model_lstm.predict(testX)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train Score: 5.78 RMSE\n",
      "Test Score: 7.91 RMSE\n",
      "MAE: 7.219517209309099\n",
      "MSE: 62.52622988137047\n",
      "RMSE: 7.907352899761745\n"
     ]
    }
   ],
   "source": [
    "# invert predictions\n",
    "trainPredict = scaler.inverse_transform(trainPredict)\n",
    "trainY = scaler.inverse_transform([trainY])\n",
    "testPredict = scaler.inverse_transform(testPredict)\n",
    "testY = scaler.inverse_transform([testY])\n",
    "# calculate root mean squared error\n",
    "trainScore = np.sqrt(mean_squared_error(trainY[0], trainPredict[:,0]))\n",
    "print('Train Score: %.2f RMSE' % (trainScore))\n",
    "testScore = np.sqrt(mean_squared_error(testY[0], testPredict[:,0]))\n",
    "print('Test Score: %.2f RMSE' % (testScore))\n",
    "\n",
    "from sklearn import metrics\n",
    "\n",
    "print('MAE:', metrics.mean_absolute_error(testY[0], testPredict[:,0]))\n",
    "print('MSE:', metrics.mean_squared_error(testY[0], testPredict[:,0]))\n",
    "print('RMSE:', np.sqrt(metrics.mean_squared_error(testY[0], testPredict[:,0])))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Vanilla LSTM, unit = 9"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "290/290 - 2s - loss: 0.0643 - 2s/epoch - 8ms/step\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<keras.callbacks.History at 0x154330b20>"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model_lstm = Sequential()\n",
    "model_lstm.add(LSTM(9, input_shape=(1, look_back)))\n",
    "model_lstm.add(Dense(1))\n",
    "model_lstm.compile(loss='mean_squared_error', optimizer='adam')\n",
    "\n",
    "model_lstm.fit(trainX, trainY, callbacks=[EarlyStopping(monitor='loss', patience=2),\n",
    "                                     ModelCheckpoint(filepath='best_model_lstm.h5',\n",
    "                                                     monitor='loss',\n",
    "                                                     save_best_only=True)],\n",
    "          batch_size=1,\n",
    "          verbose=2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"sequential\"\n",
      "_________________________________________________________________\n",
      " Layer (type)                Output Shape              Param #   \n",
      "=================================================================\n",
      " lstm (LSTM)                 (None, 9)                 396       \n",
      "                                                                 \n",
      " dense (Dense)               (None, 1)                 10        \n",
      "                                                                 \n",
      "=================================================================\n",
      "Total params: 406\n",
      "Trainable params: 406\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    }
   ],
   "source": [
    "model_lstm.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "10/10 [==============================] - 1s 2ms/step\n",
      "3/3 [==============================] - 0s 2ms/step\n"
     ]
    }
   ],
   "source": [
    "# make predictions\n",
    "trainPredict = model_lstm.predict(trainX)\n",
    "testPredict = model_lstm.predict(testX)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train Score: 5.97 RMSE\n",
      "Test Score: 8.01 RMSE\n",
      "MAE: 7.270982042313473\n",
      "MSE: 64.17459366143783\n",
      "RMSE: 8.010904671848106\n"
     ]
    }
   ],
   "source": [
    "# invert predictions\n",
    "trainPredict = scaler.inverse_transform(trainPredict)\n",
    "trainY = scaler.inverse_transform([trainY])\n",
    "testPredict = scaler.inverse_transform(testPredict)\n",
    "testY = scaler.inverse_transform([testY])\n",
    "# calculate root mean squared error\n",
    "trainScore = np.sqrt(mean_squared_error(trainY[0], trainPredict[:,0]))\n",
    "print('Train Score: %.2f RMSE' % (trainScore))\n",
    "testScore = np.sqrt(mean_squared_error(testY[0], testPredict[:,0]))\n",
    "print('Test Score: %.2f RMSE' % (testScore))\n",
    "\n",
    "from sklearn import metrics\n",
    "\n",
    "print('MAE:', metrics.mean_absolute_error(testY[0], testPredict[:,0]))\n",
    "print('MSE:', metrics.mean_squared_error(testY[0], testPredict[:,0]))\n",
    "print('RMSE:', np.sqrt(metrics.mean_squared_error(testY[0], testPredict[:,0])))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Vanilla LSTM, unit = 10"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "290/290 - 2s - loss: 0.0484 - 2s/epoch - 7ms/step\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<keras.callbacks.History at 0x14d76bfd0>"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model_lstm = Sequential()\n",
    "model_lstm.add(LSTM(10, input_shape=(1, look_back)))\n",
    "model_lstm.add(Dense(1))\n",
    "model_lstm.compile(loss='mean_squared_error', optimizer='adam')\n",
    "\n",
    "model_lstm.fit(trainX, trainY, callbacks=[EarlyStopping(monitor='loss', patience=2),\n",
    "                                     ModelCheckpoint(filepath='best_model_lstm.h5',\n",
    "                                                     monitor='loss',\n",
    "                                                     save_best_only=True)],\n",
    "          batch_size=1,\n",
    "          verbose=2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"sequential\"\n",
      "_________________________________________________________________\n",
      " Layer (type)                Output Shape              Param #   \n",
      "=================================================================\n",
      " lstm (LSTM)                 (None, 10)                480       \n",
      "                                                                 \n",
      " dense (Dense)               (None, 1)                 11        \n",
      "                                                                 \n",
      "=================================================================\n",
      "Total params: 491\n",
      "Trainable params: 491\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    }
   ],
   "source": [
    "model_lstm.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "10/10 [==============================] - 1s 4ms/step\n",
      "3/3 [==============================] - 0s 6ms/step\n"
     ]
    }
   ],
   "source": [
    "# make predictions\n",
    "trainPredict = model_lstm.predict(trainX)\n",
    "testPredict = model_lstm.predict(testX)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train Score: 5.06 RMSE\n",
      "Test Score: 7.32 RMSE\n",
      "MAE: 6.718372853857542\n",
      "MSE: 53.54271115909257\n",
      "RMSE: 7.317288511401786\n"
     ]
    }
   ],
   "source": [
    "# invert predictions\n",
    "trainPredict = scaler.inverse_transform(trainPredict)\n",
    "trainY = scaler.inverse_transform([trainY])\n",
    "testPredict = scaler.inverse_transform(testPredict)\n",
    "testY = scaler.inverse_transform([testY])\n",
    "# calculate root mean squared error\n",
    "trainScore = np.sqrt(mean_squared_error(trainY[0], trainPredict[:,0]))\n",
    "print('Train Score: %.2f RMSE' % (trainScore))\n",
    "testScore = np.sqrt(mean_squared_error(testY[0], testPredict[:,0]))\n",
    "print('Test Score: %.2f RMSE' % (testScore))\n",
    "\n",
    "from sklearn import metrics\n",
    "\n",
    "print('MAE:', metrics.mean_absolute_error(testY[0], testPredict[:,0]))\n",
    "print('MSE:', metrics.mean_squared_error(testY[0], testPredict[:,0]))\n",
    "print('RMSE:', np.sqrt(metrics.mean_squared_error(testY[0], testPredict[:,0])))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# STACKED LSTM"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [],
   "source": [
    "# create and fit the Stacked LSTM\n",
    "model_stacked_lstm = Sequential()\n",
    "model_stacked_lstm.add(LSTM(4, activation='relu', return_sequences=True,\n",
    "                            input_shape=(1, look_back)))\n",
    "model_stacked_lstm.add(LSTM(4, activation='relu'))\n",
    "model_stacked_lstm.add(Dense(1))\n",
    "model_stacked_lstm.compile(loss='mean_squared_error', optimizer='adam')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "290/290 - 2s - loss: 0.0887 - 2s/epoch - 8ms/step\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<keras.callbacks.History at 0x155922b20>"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model_stacked_lstm.fit(trainX, trainY, callbacks=[EarlyStopping(monitor='loss', patience=2),\n",
    "                                     ModelCheckpoint(filepath='best_model_stacked_lstm.h5',\n",
    "                                                     monitor='loss',\n",
    "                                                     save_best_only=True)],\n",
    "          batch_size=1,\n",
    "          verbose=2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"sequential\"\n",
      "_________________________________________________________________\n",
      " Layer (type)                Output Shape              Param #   \n",
      "=================================================================\n",
      " lstm (LSTM)                 (None, 1, 4)              96        \n",
      "                                                                 \n",
      " lstm_1 (LSTM)               (None, 4)                 144       \n",
      "                                                                 \n",
      " dense (Dense)               (None, 1)                 5         \n",
      "                                                                 \n",
      "=================================================================\n",
      "Total params: 245\n",
      "Trainable params: 245\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    }
   ],
   "source": [
    "model_stacked_lstm.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "10/10 [==============================] - 1s 6ms/step\n",
      "3/3 [==============================] - 0s 3ms/step\n"
     ]
    }
   ],
   "source": [
    "# make predictions\n",
    "trainPredict = model_stacked_lstm.predict(trainX)\n",
    "testPredict = model_stacked_lstm.predict(testX)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train Score: 8.01 RMSE\n",
      "Test Score: 7.49 RMSE\n"
     ]
    }
   ],
   "source": [
    "# invert predictions\n",
    "trainPredict = scaler.inverse_transform(trainPredict)\n",
    "trainY = scaler.inverse_transform([trainY])\n",
    "testPredict = scaler.inverse_transform(testPredict)\n",
    "testY = scaler.inverse_transform([testY])\n",
    "# calculate root mean squared error\n",
    "trainScore = np.sqrt(mean_squared_error(trainY[0], trainPredict[:,0]))\n",
    "print('Train Score: %.2f RMSE' % (trainScore))\n",
    "testScore = np.sqrt(mean_squared_error(testY[0], testPredict[:,0]))\n",
    "print('Test Score: %.2f RMSE' % (testScore))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "MAE: 5.357253458685452\n",
      "MSE: 56.1402230828893\n",
      "RMSE: 7.49267796471257\n"
     ]
    }
   ],
   "source": [
    "from sklearn import metrics\n",
    "\n",
    "print('MAE:', metrics.mean_absolute_error(testY[0], testPredict[:,0]))\n",
    "print('MSE:', metrics.mean_squared_error(testY[0], testPredict[:,0]))\n",
    "print('RMSE:', np.sqrt(metrics.mean_squared_error(testY[0], testPredict[:,0])))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# LSTM Window Method"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [],
   "source": [
    "from numpy import array\n",
    "from keras.models import Sequential\n",
    "from keras.layers import LSTM\n",
    "from keras.layers import Dense\n",
    "from keras.layers import Flatten"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [],
   "source": [
    "model_lstm_window = Sequential()\n",
    "model_lstm_window.add(LSTM(4, input_shape=(1, look_back)))\n",
    "model_lstm_window.add(Dense(1))\n",
    "model_lstm_window.compile(loss='mean_squared_error', optimizer='adam')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "288/288 - 2s - loss: 0.0293 - 2s/epoch - 7ms/step\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<keras.callbacks.History at 0x159b9f7f0>"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model_lstm_window.fit(trainX, trainY,\n",
    "                      callbacks=[EarlyStopping(monitor='loss', patience=2),\n",
    "                                 ModelCheckpoint(filepath='best_model_lstm_window.h5',\n",
    "                                                 monitor='loss',\n",
    "                                                 save_best_only=True)],\n",
    "                      batch_size=1,\n",
    "                      verbose=2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"sequential\"\n",
      "_________________________________________________________________\n",
      " Layer (type)                Output Shape              Param #   \n",
      "=================================================================\n",
      " lstm (LSTM)                 (None, 4)                 128       \n",
      "                                                                 \n",
      " dense (Dense)               (None, 1)                 5         \n",
      "                                                                 \n",
      "=================================================================\n",
      "Total params: 133\n",
      "Trainable params: 133\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    }
   ],
   "source": [
    "model_lstm_window.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "9/9 [==============================] - 1s 2ms/step\n",
      "3/3 [==============================] - 0s 3ms/step\n"
     ]
    }
   ],
   "source": [
    "# make predictions\n",
    "trainPredict = model_lstm_window.predict(trainX)\n",
    "testPredict = model_lstm_window.predict(testX)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train Score: 3.75 RMSE\n",
      "Test Score: 6.03 RMSE\n"
     ]
    }
   ],
   "source": [
    "# invert predictions\n",
    "trainPredict = scaler.inverse_transform(trainPredict)\n",
    "trainY = scaler.inverse_transform([trainY])\n",
    "testPredict = scaler.inverse_transform(testPredict)\n",
    "testY = scaler.inverse_transform([testY])\n",
    "# calculate root mean squared error\n",
    "trainScore = np.sqrt(mean_squared_error(trainY[0], trainPredict[:,0]))\n",
    "print('Train Score: %.2f RMSE' % (trainScore))\n",
    "testScore = np.sqrt(mean_squared_error(testY[0], testPredict[:,0]))\n",
    "print('Test Score: %.2f RMSE' % (testScore))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "MAE: 4.723750041553026\n",
      "MSE: 36.36964295740643\n",
      "RMSE: 6.03072491143531\n"
     ]
    }
   ],
   "source": [
    "from sklearn import metrics\n",
    "\n",
    "print('MAE:', metrics.mean_absolute_error(testY[0], testPredict[:,0]))\n",
    "print('MSE:', metrics.mean_squared_error(testY[0], testPredict[:,0]))\n",
    "print('RMSE:', np.sqrt(metrics.mean_squared_error(testY[0], testPredict[:,0])))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(288, 1)"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "trainPredict.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(69, 1)"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "testPredict.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# shift train predictions for plotting\n",
    "trainPredictPlot = np.empty_like(dataset_univar)\n",
    "trainPredictPlot[:, :] = np.nan\n",
    "trainPredictPlot[look_back:len(trainPredict)+look_back, :] = trainPredict\n",
    "# shift test predictions for plotting\n",
    "testPredictPlot = np.empty_like(dataset_univar)\n",
    "testPredictPlot[:, :] = np.nan\n",
    "testPredictPlot[len(trainPredict)+(look_back*2)+1:len(dataset)-1, :] = testPredict\n",
    "# plot baseline and predictions\n",
    "plt.plot(trainPredictPlot)\n",
    "plt.plot(testPredictPlot)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# W = 2 | LSTM Window Method + MLP "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [],
   "source": [
    "# create and fit the LSTM MLP network\n",
    "model_lstm_mlp = Sequential()\n",
    "model_lstm_mlp.add(LSTM(4, input_shape=(1, look_back)))\n",
    "model_lstm_mlp.add(Dense(100, activation='relu', input_dim=2))\n",
    "model_lstm_mlp.add(Dense(1))\n",
    "model_lstm_mlp.compile(loss='mean_squared_error', optimizer='adam')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "289/289 - 2s - loss: 0.0354 - 2s/epoch - 8ms/step\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<keras.callbacks.History at 0x1583a2b50>"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model_lstm_mlp.fit(trainX, trainY, callbacks=[EarlyStopping(monitor='loss', patience=2),\n",
    "                                     ModelCheckpoint(filepath='best_model_lstm_mlp.h5',\n",
    "                                                     monitor='loss',\n",
    "                                                     save_best_only=True)],\n",
    "          batch_size=1,\n",
    "          verbose=2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"sequential\"\n",
      "_________________________________________________________________\n",
      " Layer (type)                Output Shape              Param #   \n",
      "=================================================================\n",
      " lstm (LSTM)                 (None, 4)                 112       \n",
      "                                                                 \n",
      " dense (Dense)               (None, 100)               500       \n",
      "                                                                 \n",
      " dense_1 (Dense)             (None, 1)                 101       \n",
      "                                                                 \n",
      "=================================================================\n",
      "Total params: 713\n",
      "Trainable params: 713\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    }
   ],
   "source": [
    "model_lstm_mlp.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "10/10 [==============================] - 1s 2ms/step\n",
      "3/3 [==============================] - 0s 3ms/step\n"
     ]
    }
   ],
   "source": [
    "# make predictions\n",
    "trainPredict = model_lstm_mlp.predict(trainX)\n",
    "testPredict = model_lstm_mlp.predict(testX)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train Score: 4.21 RMSE\n",
      "Test Score: 6.45 RMSE\n"
     ]
    }
   ],
   "source": [
    "# invert predictions\n",
    "trainPredict = scaler.inverse_transform(trainPredict)\n",
    "trainY = scaler.inverse_transform([trainY])\n",
    "testPredict = scaler.inverse_transform(testPredict)\n",
    "testY = scaler.inverse_transform([testY])\n",
    "# calculate root mean squared error\n",
    "trainScore = np.sqrt(mean_squared_error(trainY[0], trainPredict[:,0]))\n",
    "print('Train Score: %.2f RMSE' % (trainScore))\n",
    "testScore = np.sqrt(mean_squared_error(testY[0], testPredict[:,0]))\n",
    "print('Test Score: %.2f RMSE' % (testScore))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "MAE: 5.803683482663953\n",
      "MSE: 41.546202364534196\n",
      "RMSE: 6.44563436478786\n"
     ]
    }
   ],
   "source": [
    "from sklearn import metrics\n",
    "\n",
    "print('MAE:', metrics.mean_absolute_error(testY[0], testPredict[:,0]))\n",
    "print('MSE:', metrics.mean_squared_error(testY[0], testPredict[:,0]))\n",
    "print('RMSE:', np.sqrt(metrics.mean_squared_error(testY[0], testPredict[:,0])))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# W = 3 | LSTM Window Method + MLP "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [],
   "source": [
    "# create and fit the LSTM MLP network\n",
    "model_lstm_mlp = Sequential()\n",
    "model_lstm_mlp.add(LSTM(4, input_shape=(1, look_back)))\n",
    "model_lstm_mlp.add(Dense(100, activation='relu', input_dim=2))\n",
    "model_lstm_mlp.add(Dense(1))\n",
    "model_lstm_mlp.compile(loss='mean_squared_error', optimizer='adam')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "288/288 - 2s - loss: 0.0232 - 2s/epoch - 8ms/step\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<keras.callbacks.History at 0x15575ce50>"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model_lstm_mlp.fit(trainX, trainY, callbacks=[EarlyStopping(monitor='loss', patience=2),\n",
    "                                     ModelCheckpoint(filepath='best_model_lstm_mlp.h5',\n",
    "                                                     monitor='loss',\n",
    "                                                     save_best_only=True)],\n",
    "          batch_size=1,\n",
    "          verbose=2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"sequential\"\n",
      "_________________________________________________________________\n",
      " Layer (type)                Output Shape              Param #   \n",
      "=================================================================\n",
      " lstm (LSTM)                 (None, 4)                 128       \n",
      "                                                                 \n",
      " dense (Dense)               (None, 100)               500       \n",
      "                                                                 \n",
      " dense_1 (Dense)             (None, 1)                 101       \n",
      "                                                                 \n",
      "=================================================================\n",
      "Total params: 729\n",
      "Trainable params: 729\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    }
   ],
   "source": [
    "model_lstm_mlp.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "9/9 [==============================] - 1s 4ms/step\n",
      "3/3 [==============================] - 1s 4ms/step\n"
     ]
    }
   ],
   "source": [
    "# make predictions\n",
    "trainPredict = model_lstm_mlp.predict(trainX)\n",
    "testPredict = model_lstm_mlp.predict(testX)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train Score: 2.31 RMSE\n",
      "Test Score: 4.80 RMSE\n"
     ]
    }
   ],
   "source": [
    "# invert predictions\n",
    "trainPredict = scaler.inverse_transform(trainPredict)\n",
    "trainY = scaler.inverse_transform([trainY])\n",
    "testPredict = scaler.inverse_transform(testPredict)\n",
    "testY = scaler.inverse_transform([testY])\n",
    "# calculate root mean squared error\n",
    "trainScore = np.sqrt(mean_squared_error(trainY[0], trainPredict[:,0]))\n",
    "print('Train Score: %.2f RMSE' % (trainScore))\n",
    "testScore = np.sqrt(mean_squared_error(testY[0], testPredict[:,0]))\n",
    "print('Test Score: %.2f RMSE' % (testScore))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "MAE: 2.5199632468629063\n",
      "MSE: 23.07642339504055\n",
      "RMSE: 4.803792605331807\n"
     ]
    }
   ],
   "source": [
    "from sklearn import metrics\n",
    "\n",
    "print('MAE:', metrics.mean_absolute_error(testY[0], testPredict[:,0]))\n",
    "print('MSE:', metrics.mean_squared_error(testY[0], testPredict[:,0]))\n",
    "print('RMSE:', np.sqrt(metrics.mean_squared_error(testY[0], testPredict[:,0])))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# shift train predictions for plotting\n",
    "trainPredictPlot = np.empty_like(dataset_univar)\n",
    "trainPredictPlot[:, :] = np.nan\n",
    "trainPredictPlot[look_back:len(trainPredict)+look_back, :] = trainPredict\n",
    "# shift test predictions for plotting\n",
    "testPredictPlot = np.empty_like(dataset_univar)\n",
    "testPredictPlot[:, :] = np.nan\n",
    "testPredictPlot[len(trainPredict)+(look_back*2)+1:len(dataset)-1, :] = testPredict\n",
    "# plot baseline and predictions\n",
    "plt.plot(trainPredictPlot)\n",
    "plt.plot(testPredictPlot)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# W = 4 | LSTM Window Method + MLP"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [],
   "source": [
    "# create and fit the LSTM MLP network\n",
    "model_lstm_mlp = Sequential()\n",
    "model_lstm_mlp.add(LSTM(4, input_shape=(1, look_back)))\n",
    "model_lstm_mlp.add(Dense(100, activation='relu', input_dim=2))\n",
    "model_lstm_mlp.add(Dense(1))\n",
    "model_lstm_mlp.compile(loss='mean_squared_error', optimizer='adam')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "287/287 - 3s - loss: 0.0240 - 3s/epoch - 9ms/step\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<keras.callbacks.History at 0x159ccbe50>"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model_lstm_mlp.fit(trainX, trainY, callbacks=[EarlyStopping(monitor='loss', patience=2),\n",
    "                                     ModelCheckpoint(filepath='best_model_lstm_mlp.h5',\n",
    "                                                     monitor='loss',\n",
    "                                                     save_best_only=True)],\n",
    "          batch_size=1,\n",
    "          verbose=2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"sequential\"\n",
      "_________________________________________________________________\n",
      " Layer (type)                Output Shape              Param #   \n",
      "=================================================================\n",
      " lstm (LSTM)                 (None, 4)                 144       \n",
      "                                                                 \n",
      " dense (Dense)               (None, 100)               500       \n",
      "                                                                 \n",
      " dense_1 (Dense)             (None, 1)                 101       \n",
      "                                                                 \n",
      "=================================================================\n",
      "Total params: 745\n",
      "Trainable params: 745\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    }
   ],
   "source": [
    "model_lstm_mlp.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "9/9 [==============================] - 1s 11ms/step\n",
      "3/3 [==============================] - 0s 3ms/step\n"
     ]
    }
   ],
   "source": [
    "# make predictions\n",
    "trainPredict = model_lstm_mlp.predict(trainX)\n",
    "testPredict = model_lstm_mlp.predict(testX)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train Score: 2.31 RMSE\n",
      "Test Score: 5.04 RMSE\n"
     ]
    }
   ],
   "source": [
    "# invert predictions\n",
    "trainPredict = scaler.inverse_transform(trainPredict)\n",
    "trainY = scaler.inverse_transform([trainY])\n",
    "testPredict = scaler.inverse_transform(testPredict)\n",
    "testY = scaler.inverse_transform([testY])\n",
    "# calculate root mean squared error\n",
    "trainScore = np.sqrt(mean_squared_error(trainY[0], trainPredict[:,0]))\n",
    "print('Train Score: %.2f RMSE' % (trainScore))\n",
    "testScore = np.sqrt(mean_squared_error(testY[0], testPredict[:,0]))\n",
    "print('Test Score: %.2f RMSE' % (testScore))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "MAE: 3.2113771800301905\n",
      "MSE: 25.386662505856894\n",
      "RMSE: 5.038517887817497\n"
     ]
    }
   ],
   "source": [
    "from sklearn import metrics\n",
    "\n",
    "print('MAE:', metrics.mean_absolute_error(testY[0], testPredict[:,0]))\n",
    "print('MSE:', metrics.mean_squared_error(testY[0], testPredict[:,0]))\n",
    "print('RMSE:', np.sqrt(metrics.mean_squared_error(testY[0], testPredict[:,0])))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# shift train predictions for plotting\n",
    "trainPredictPlot = np.empty_like(dataset_univar)\n",
    "trainPredictPlot[:, :] = np.nan\n",
    "trainPredictPlot[look_back:len(trainPredict)+look_back, :] = trainPredict\n",
    "# shift test predictions for plotting\n",
    "testPredictPlot = np.empty_like(dataset_univar)\n",
    "testPredictPlot[:, :] = np.nan\n",
    "testPredictPlot[len(trainPredict)+(look_back*2)+1:len(dataset)-1, :] = testPredict\n",
    "# plot baseline and predictions\n",
    "plt.plot(trainPredictPlot)\n",
    "plt.plot(testPredictPlot)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# W = 5 | LSTM Window Method + MLP"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [],
   "source": [
    "# create and fit the LSTM MLP network\n",
    "model_lstm_mlp = Sequential()\n",
    "model_lstm_mlp.add(LSTM(4, input_shape=(1, look_back)))\n",
    "model_lstm_mlp.add(Dense(100, activation='relu', input_dim=2))\n",
    "model_lstm_mlp.add(Dense(1))\n",
    "model_lstm_mlp.compile(loss='mean_squared_error', optimizer='adam')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "286/286 - 2s - loss: 0.0167 - 2s/epoch - 8ms/step\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<keras.callbacks.History at 0x155123e50>"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model_lstm_mlp.fit(trainX, trainY, callbacks=[EarlyStopping(monitor='loss', patience=2),\n",
    "                                     ModelCheckpoint(filepath='best_model_lstm_mlp.h5',\n",
    "                                                     monitor='loss',\n",
    "                                                     save_best_only=True)],\n",
    "          batch_size=1,\n",
    "          verbose=2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"sequential\"\n",
      "_________________________________________________________________\n",
      " Layer (type)                Output Shape              Param #   \n",
      "=================================================================\n",
      " lstm (LSTM)                 (None, 4)                 160       \n",
      "                                                                 \n",
      " dense (Dense)               (None, 100)               500       \n",
      "                                                                 \n",
      " dense_1 (Dense)             (None, 1)                 101       \n",
      "                                                                 \n",
      "=================================================================\n",
      "Total params: 761\n",
      "Trainable params: 761\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    }
   ],
   "source": [
    "model_lstm_mlp.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "9/9 [==============================] - 1s 8ms/step\n",
      "3/3 [==============================] - 0s 2ms/step\n"
     ]
    }
   ],
   "source": [
    "# make predictions\n",
    "trainPredict = model_lstm_mlp.predict(trainX)\n",
    "testPredict = model_lstm_mlp.predict(testX)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train Score: 2.07 RMSE\n",
      "Test Score: 4.53 RMSE\n"
     ]
    }
   ],
   "source": [
    "# invert predictions\n",
    "trainPredict = scaler.inverse_transform(trainPredict)\n",
    "trainY = scaler.inverse_transform([trainY])\n",
    "testPredict = scaler.inverse_transform(testPredict)\n",
    "testY = scaler.inverse_transform([testY])\n",
    "# calculate root mean squared error\n",
    "trainScore = np.sqrt(mean_squared_error(trainY[0], trainPredict[:,0]))\n",
    "print('Train Score: %.2f RMSE' % (trainScore))\n",
    "testScore = np.sqrt(mean_squared_error(testY[0], testPredict[:,0]))\n",
    "print('Test Score: %.2f RMSE' % (testScore))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "MAE: 2.7635585666315494\n",
      "MSE: 20.49983457396041\n",
      "RMSE: 4.527674300781849\n"
     ]
    }
   ],
   "source": [
    "from sklearn import metrics\n",
    "\n",
    "print('MAE:', metrics.mean_absolute_error(testY[0], testPredict[:,0]))\n",
    "print('MSE:', metrics.mean_squared_error(testY[0], testPredict[:,0]))\n",
    "print('RMSE:', np.sqrt(metrics.mean_squared_error(testY[0], testPredict[:,0])))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# shift train predictions for plotting\n",
    "trainPredictPlot = np.empty_like(dataset_univar)\n",
    "trainPredictPlot[:, :] = np.nan\n",
    "trainPredictPlot[look_back:len(trainPredict)+look_back, :] = trainPredict\n",
    "# shift test predictions for plotting\n",
    "testPredictPlot = np.empty_like(dataset_univar)\n",
    "testPredictPlot[:, :] = np.nan\n",
    "testPredictPlot[len(trainPredict)+(look_back*2)+1:len(dataset)-1, :] = testPredict\n",
    "# plot baseline and predictions\n",
    "plt.plot(trainPredictPlot)\n",
    "plt.plot(testPredictPlot)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# MLP Units Experiments"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "9/9 [==============================] - 1s 2ms/step\n",
      "3/3 [==============================] - 0s 2ms/step\n"
     ]
    }
   ],
   "source": [
    "# create and fit the LSTM MLP network\n",
    "model_lstm_mlp = Sequential()\n",
    "model_lstm_mlp.add(LSTM(4, input_shape=(1, look_back)))\n",
    "model_lstm_mlp.add(Dense(1, activation='relu', input_dim=2))\n",
    "model_lstm_mlp.add(Dense(1))\n",
    "model_lstm_mlp.compile(loss='mean_squared_error', optimizer='adam')\n",
    "\n",
    "# make predictions\n",
    "trainPredict = model_lstm_mlp.predict(trainX)\n",
    "testPredict = model_lstm_mlp.predict(testX)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# MLP units = 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train Score: 9.20 RMSE\n",
      "Test Score: 6.51 RMSE\n",
      "MAE: 2.798465508720297\n",
      "MSE: 42.32704783401604\n",
      "RMSE: 6.505924056889693\n"
     ]
    }
   ],
   "source": [
    "# invert predictions\n",
    "trainPredict = scaler.inverse_transform(trainPredict)\n",
    "trainY = scaler.inverse_transform([trainY])\n",
    "testPredict = scaler.inverse_transform(testPredict)\n",
    "testY = scaler.inverse_transform([testY])\n",
    "# calculate root mean squared error\n",
    "trainScore = np.sqrt(mean_squared_error(trainY[0], trainPredict[:,0]))\n",
    "print('Train Score: %.2f RMSE' % (trainScore))\n",
    "testScore = np.sqrt(mean_squared_error(testY[0], testPredict[:,0]))\n",
    "print('Test Score: %.2f RMSE' % (testScore))\n",
    "\n",
    "from sklearn import metrics\n",
    "\n",
    "print('MAE:', metrics.mean_absolute_error(testY[0], testPredict[:,0]))\n",
    "print('MSE:', metrics.mean_squared_error(testY[0], testPredict[:,0]))\n",
    "print('RMSE:', np.sqrt(metrics.mean_squared_error(testY[0], testPredict[:,0])))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# MLP units = 2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "9/9 [==============================] - 1s 4ms/step\n",
      "3/3 [==============================] - 0s 12ms/step\n"
     ]
    }
   ],
   "source": [
    "# create and fit the LSTM MLP network\n",
    "model_lstm_mlp_10 = Sequential()\n",
    "model_lstm_mlp_10.add(LSTM(4, input_shape=(1, look_back)))\n",
    "model_lstm_mlp_10.add(Dense(2, activation='relu', input_dim=2))\n",
    "model_lstm_mlp_10.add(Dense(1))\n",
    "model_lstm_mlp_10.compile(loss='mean_squared_error', optimizer='adam')\n",
    "\n",
    "# make predictions\n",
    "trainPredict = model_lstm_mlp_10.predict(trainX)\n",
    "testPredict = model_lstm_mlp_10.predict(testX)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train Score: 11.25 RMSE\n",
      "Test Score: 8.15 RMSE\n",
      "MAE: 3.415751691578252\n",
      "MSE: 66.50340838642057\n",
      "RMSE: 8.154962194052194\n"
     ]
    }
   ],
   "source": [
    "# invert predictions\n",
    "trainPredict = scaler.inverse_transform(trainPredict)\n",
    "trainY = scaler.inverse_transform([trainY])\n",
    "testPredict = scaler.inverse_transform(testPredict)\n",
    "testY = scaler.inverse_transform([testY])\n",
    "# calculate root mean squared error\n",
    "trainScore = np.sqrt(mean_squared_error(trainY[0], trainPredict[:,0]))\n",
    "print('Train Score: %.2f RMSE' % (trainScore))\n",
    "testScore = np.sqrt(mean_squared_error(testY[0], testPredict[:,0]))\n",
    "print('Test Score: %.2f RMSE' % (testScore))\n",
    "\n",
    "from sklearn import metrics\n",
    "\n",
    "print('MAE:', metrics.mean_absolute_error(testY[0], testPredict[:,0]))\n",
    "print('MSE:', metrics.mean_squared_error(testY[0], testPredict[:,0]))\n",
    "print('RMSE:', np.sqrt(metrics.mean_squared_error(testY[0], testPredict[:,0])))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# W = 6 | LSTM Window Method + MLP"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "285/285 - 2s - loss: 0.0314 - 2s/epoch - 8ms/step\n",
      "Model: \"sequential\"\n",
      "_________________________________________________________________\n",
      " Layer (type)                Output Shape              Param #   \n",
      "=================================================================\n",
      " lstm (LSTM)                 (None, 4)                 176       \n",
      "                                                                 \n",
      " dense (Dense)               (None, 100)               500       \n",
      "                                                                 \n",
      " dense_1 (Dense)             (None, 1)                 101       \n",
      "                                                                 \n",
      "=================================================================\n",
      "Total params: 777\n",
      "Trainable params: 777\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    }
   ],
   "source": [
    "# create and fit the LSTM MLP network\n",
    "model_lstm_mlp = Sequential()\n",
    "model_lstm_mlp.add(LSTM(4, input_shape=(1, look_back)))\n",
    "model_lstm_mlp.add(Dense(100, activation='relu', input_dim=2))\n",
    "model_lstm_mlp.add(Dense(1))\n",
    "model_lstm_mlp.compile(loss='mean_squared_error', optimizer='adam')\n",
    "\n",
    "model_lstm_mlp.fit(trainX, trainY, callbacks=[EarlyStopping(monitor='loss', patience=2),\n",
    "                                     ModelCheckpoint(filepath='best_model_lstm_mlp.h5',\n",
    "                                                     monitor='loss',\n",
    "                                                     save_best_only=True)],\n",
    "          batch_size=1,\n",
    "          verbose=2)\n",
    "\n",
    "model_lstm_mlp.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "9/9 [==============================] - 1s 2ms/step\n",
      "3/3 [==============================] - 0s 2ms/step\n",
      "Train Score: 2.45 RMSE\n",
      "Test Score: 5.13 RMSE\n"
     ]
    }
   ],
   "source": [
    "# make predictions\n",
    "trainPredict = model_lstm_mlp.predict(trainX)\n",
    "testPredict = model_lstm_mlp.predict(testX)\n",
    "\n",
    "# invert predictions\n",
    "trainPredict = scaler.inverse_transform(trainPredict)\n",
    "trainY = scaler.inverse_transform([trainY])\n",
    "testPredict = scaler.inverse_transform(testPredict)\n",
    "testY = scaler.inverse_transform([testY])\n",
    "# calculate root mean squared error\n",
    "trainScore = np.sqrt(mean_squared_error(trainY[0], trainPredict[:,0]))\n",
    "print('Train Score: %.2f RMSE' % (trainScore))\n",
    "testScore = np.sqrt(mean_squared_error(testY[0], testPredict[:,0]))\n",
    "print('Test Score: %.2f RMSE' % (testScore))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "MAE: 2.325820544352212\n",
      "MSE: 26.303995955953756\n",
      "RMSE: 5.128742141690665\n"
     ]
    }
   ],
   "source": [
    "from sklearn import metrics\n",
    "\n",
    "print('MAE:', metrics.mean_absolute_error(testY[0], testPredict[:,0]))\n",
    "print('MSE:', metrics.mean_squared_error(testY[0], testPredict[:,0]))\n",
    "print('RMSE:', np.sqrt(metrics.mean_squared_error(testY[0], testPredict[:,0])))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# shift train predictions for plotting\n",
    "trainPredictPlot = np.empty_like(dataset_univar)\n",
    "trainPredictPlot[:, :] = np.nan\n",
    "trainPredictPlot[look_back:len(trainPredict)+look_back, :] = trainPredict\n",
    "# shift test predictions for plotting\n",
    "testPredictPlot = np.empty_like(dataset_univar)\n",
    "testPredictPlot[:, :] = np.nan\n",
    "testPredictPlot[len(trainPredict)+(look_back*2)+1:len(dataset)-1, :] = testPredict\n",
    "# plot baseline and predictions\n",
    "plt.plot(trainPredictPlot)\n",
    "plt.plot(testPredictPlot)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# W = 7 | LSTM Window Method + MLP"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "284/284 - 2s - loss: 0.0196 - 2s/epoch - 8ms/step\n",
      "Model: \"sequential\"\n",
      "_________________________________________________________________\n",
      " Layer (type)                Output Shape              Param #   \n",
      "=================================================================\n",
      " lstm (LSTM)                 (None, 4)                 192       \n",
      "                                                                 \n",
      " dense (Dense)               (None, 100)               500       \n",
      "                                                                 \n",
      " dense_1 (Dense)             (None, 1)                 101       \n",
      "                                                                 \n",
      "=================================================================\n",
      "Total params: 793\n",
      "Trainable params: 793\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    }
   ],
   "source": [
    "# create and fit the LSTM MLP network\n",
    "model_lstm_mlp = Sequential()\n",
    "model_lstm_mlp.add(LSTM(4, input_shape=(1, look_back)))\n",
    "model_lstm_mlp.add(Dense(100, activation='relu', input_dim=2))\n",
    "model_lstm_mlp.add(Dense(1))\n",
    "model_lstm_mlp.compile(loss='mean_squared_error', optimizer='adam')\n",
    "\n",
    "model_lstm_mlp.fit(trainX, trainY, callbacks=[EarlyStopping(monitor='loss', patience=2),\n",
    "                                     ModelCheckpoint(filepath='best_model_lstm_mlp.h5',\n",
    "                                                     monitor='loss',\n",
    "                                                     save_best_only=True)],\n",
    "          batch_size=1,\n",
    "          verbose=2)\n",
    "\n",
    "model_lstm_mlp.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "9/9 [==============================] - 1s 2ms/step\n",
      "3/3 [==============================] - 0s 3ms/step\n",
      "Train Score: 3.30 RMSE\n",
      "Test Score: 6.03 RMSE\n"
     ]
    }
   ],
   "source": [
    "# make predictions\n",
    "trainPredict = model_lstm_mlp.predict(trainX)\n",
    "testPredict = model_lstm_mlp.predict(testX)\n",
    "\n",
    "# invert predictions\n",
    "trainPredict = scaler.inverse_transform(trainPredict)\n",
    "trainY = scaler.inverse_transform([trainY])\n",
    "testPredict = scaler.inverse_transform(testPredict)\n",
    "testY = scaler.inverse_transform([testY])\n",
    "# calculate root mean squared error\n",
    "trainScore = np.sqrt(mean_squared_error(trainY[0], trainPredict[:,0]))\n",
    "print('Train Score: %.2f RMSE' % (trainScore))\n",
    "testScore = np.sqrt(mean_squared_error(testY[0], testPredict[:,0]))\n",
    "print('Test Score: %.2f RMSE' % (testScore))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "MAE: 2.856226860459618\n",
      "MSE: 36.30701604151716\n",
      "RMSE: 6.025530353547077\n"
     ]
    }
   ],
   "source": [
    "from sklearn import metrics\n",
    "\n",
    "print('MAE:', metrics.mean_absolute_error(testY[0], testPredict[:,0]))\n",
    "print('MSE:', metrics.mean_squared_error(testY[0], testPredict[:,0]))\n",
    "print('RMSE:', np.sqrt(metrics.mean_squared_error(testY[0], testPredict[:,0])))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# shift train predictions for plotting\n",
    "trainPredictPlot = np.empty_like(dataset_univar)\n",
    "trainPredictPlot[:, :] = np.nan\n",
    "trainPredictPlot[look_back:len(trainPredict)+look_back, :] = trainPredict\n",
    "# shift test predictions for plotting\n",
    "testPredictPlot = np.empty_like(dataset_univar)\n",
    "testPredictPlot[:, :] = np.nan\n",
    "testPredictPlot[len(trainPredict)+(look_back*2)+1:len(dataset)-1, :] = testPredict\n",
    "# plot baseline and predictions\n",
    "plt.plot(trainPredictPlot)\n",
    "plt.plot(testPredictPlot)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# W = 8 | LSTM Window Method + MLP"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "283/283 - 3s - loss: 0.0215 - 3s/epoch - 10ms/step\n",
      "Model: \"sequential\"\n",
      "_________________________________________________________________\n",
      " Layer (type)                Output Shape              Param #   \n",
      "=================================================================\n",
      " lstm (LSTM)                 (None, 4)                 208       \n",
      "                                                                 \n",
      " dense (Dense)               (None, 100)               500       \n",
      "                                                                 \n",
      " dense_1 (Dense)             (None, 1)                 101       \n",
      "                                                                 \n",
      "=================================================================\n",
      "Total params: 809\n",
      "Trainable params: 809\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    }
   ],
   "source": [
    "# create and fit the LSTM MLP network\n",
    "model_lstm_mlp = Sequential()\n",
    "model_lstm_mlp.add(LSTM(4, input_shape=(1, look_back)))\n",
    "model_lstm_mlp.add(Dense(100, activation='relu', input_dim=2))\n",
    "model_lstm_mlp.add(Dense(1))\n",
    "model_lstm_mlp.compile(loss='mean_squared_error', optimizer='adam')\n",
    "\n",
    "model_lstm_mlp.fit(trainX, trainY, callbacks=[EarlyStopping(monitor='loss', patience=2),\n",
    "                                     ModelCheckpoint(filepath='best_model_lstm_mlp.h5',\n",
    "                                                     monitor='loss',\n",
    "                                                     save_best_only=True)],\n",
    "          batch_size=1,\n",
    "          verbose=2)\n",
    "\n",
    "model_lstm_mlp.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "9/9 [==============================] - 1s 4ms/step\n",
      "2/2 [==============================] - 0s 5ms/step\n",
      "Train Score: 2.28 RMSE\n",
      "Test Score: 5.31 RMSE\n"
     ]
    }
   ],
   "source": [
    "# make predictions\n",
    "trainPredict = model_lstm_mlp.predict(trainX)\n",
    "testPredict = model_lstm_mlp.predict(testX)\n",
    "\n",
    "# invert predictions\n",
    "trainPredict = scaler.inverse_transform(trainPredict)\n",
    "trainY = scaler.inverse_transform([trainY])\n",
    "testPredict = scaler.inverse_transform(testPredict)\n",
    "testY = scaler.inverse_transform([testY])\n",
    "# calculate root mean squared error\n",
    "trainScore = np.sqrt(mean_squared_error(trainY[0], trainPredict[:,0]))\n",
    "print('Train Score: %.2f RMSE' % (trainScore))\n",
    "testScore = np.sqrt(mean_squared_error(testY[0], testPredict[:,0]))\n",
    "print('Test Score: %.2f RMSE' % (testScore))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "MAE: 2.81040181075877\n",
      "MSE: 28.225549420262656\n",
      "RMSE: 5.312772291399534\n"
     ]
    }
   ],
   "source": [
    "from sklearn import metrics\n",
    "\n",
    "print('MAE:', metrics.mean_absolute_error(testY[0], testPredict[:,0]))\n",
    "print('MSE:', metrics.mean_squared_error(testY[0], testPredict[:,0]))\n",
    "print('RMSE:', np.sqrt(metrics.mean_squared_error(testY[0], testPredict[:,0])))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# shift train predictions for plotting\n",
    "trainPredictPlot = np.empty_like(dataset_univar)\n",
    "trainPredictPlot[:, :] = np.nan\n",
    "trainPredictPlot[look_back:len(trainPredict)+look_back, :] = trainPredict\n",
    "# shift test predictions for plotting\n",
    "testPredictPlot = np.empty_like(dataset_univar)\n",
    "testPredictPlot[:, :] = np.nan\n",
    "testPredictPlot[len(trainPredict)+(look_back*2)+1:len(dataset)-1, :] = testPredict\n",
    "# plot baseline and predictions\n",
    "plt.plot(trainPredictPlot)\n",
    "plt.plot(testPredictPlot)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# W = 9 | LSTM Window Method + MLP"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "282/282 - 3s - loss: 0.0224 - 3s/epoch - 10ms/step\n",
      "Model: \"sequential\"\n",
      "_________________________________________________________________\n",
      " Layer (type)                Output Shape              Param #   \n",
      "=================================================================\n",
      " lstm (LSTM)                 (None, 4)                 224       \n",
      "                                                                 \n",
      " dense (Dense)               (None, 100)               500       \n",
      "                                                                 \n",
      " dense_1 (Dense)             (None, 1)                 101       \n",
      "                                                                 \n",
      "=================================================================\n",
      "Total params: 825\n",
      "Trainable params: 825\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    }
   ],
   "source": [
    "# create and fit the LSTM MLP network\n",
    "model_lstm_mlp = Sequential()\n",
    "model_lstm_mlp.add(LSTM(4, input_shape=(1, look_back)))\n",
    "model_lstm_mlp.add(Dense(100, activation='relu', input_dim=2))\n",
    "model_lstm_mlp.add(Dense(1))\n",
    "model_lstm_mlp.compile(loss='mean_squared_error', optimizer='adam')\n",
    "\n",
    "model_lstm_mlp.fit(trainX, trainY, callbacks=[EarlyStopping(monitor='loss', patience=2),\n",
    "                                     ModelCheckpoint(filepath='best_model_lstm_mlp.h5',\n",
    "                                                     monitor='loss',\n",
    "                                                     save_best_only=True)],\n",
    "          batch_size=1,\n",
    "          verbose=2)\n",
    "\n",
    "model_lstm_mlp.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "9/9 [==============================] - 1s 2ms/step\n",
      "2/2 [==============================] - 0s 3ms/step\n",
      "Train Score: 2.69 RMSE\n",
      "Test Score: 6.13 RMSE\n"
     ]
    }
   ],
   "source": [
    "# make predictions\n",
    "trainPredict = model_lstm_mlp.predict(trainX)\n",
    "testPredict = model_lstm_mlp.predict(testX)\n",
    "\n",
    "# invert predictions\n",
    "trainPredict = scaler.inverse_transform(trainPredict)\n",
    "trainY = scaler.inverse_transform([trainY])\n",
    "testPredict = scaler.inverse_transform(testPredict)\n",
    "testY = scaler.inverse_transform([testY])\n",
    "# calculate root mean squared error\n",
    "trainScore = np.sqrt(mean_squared_error(trainY[0], trainPredict[:,0]))\n",
    "print('Train Score: %.2f RMSE' % (trainScore))\n",
    "testScore = np.sqrt(mean_squared_error(testY[0], testPredict[:,0]))\n",
    "print('Test Score: %.2f RMSE' % (testScore))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "MAE: 2.737042636363407\n",
      "MSE: 37.56627941418947\n",
      "RMSE: 6.129133659351007\n"
     ]
    }
   ],
   "source": [
    "from sklearn import metrics\n",
    "\n",
    "print('MAE:', metrics.mean_absolute_error(testY[0], testPredict[:,0]))\n",
    "print('MSE:', metrics.mean_squared_error(testY[0], testPredict[:,0]))\n",
    "print('RMSE:', np.sqrt(metrics.mean_squared_error(testY[0], testPredict[:,0])))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# shift train predictions for plotting\n",
    "trainPredictPlot = np.empty_like(dataset_univar)\n",
    "trainPredictPlot[:, :] = np.nan\n",
    "trainPredictPlot[look_back:len(trainPredict)+look_back, :] = trainPredict\n",
    "# shift test predictions for plotting\n",
    "testPredictPlot = np.empty_like(dataset_univar)\n",
    "testPredictPlot[:, :] = np.nan\n",
    "testPredictPlot[len(trainPredict)+(look_back*2)+1:len(dataset)-1, :] = testPredict\n",
    "# plot baseline and predictions\n",
    "plt.plot(trainPredictPlot)\n",
    "plt.plot(testPredictPlot)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# W = 10 | LSTM Window Method + MLP"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "281/281 - 2s - loss: 0.0180 - 2s/epoch - 8ms/step\n",
      "Model: \"sequential\"\n",
      "_________________________________________________________________\n",
      " Layer (type)                Output Shape              Param #   \n",
      "=================================================================\n",
      " lstm (LSTM)                 (None, 4)                 240       \n",
      "                                                                 \n",
      " dense (Dense)               (None, 100)               500       \n",
      "                                                                 \n",
      " dense_1 (Dense)             (None, 1)                 101       \n",
      "                                                                 \n",
      "=================================================================\n",
      "Total params: 841\n",
      "Trainable params: 841\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    }
   ],
   "source": [
    "# create and fit the LSTM MLP network\n",
    "model_lstm_mlp = Sequential()\n",
    "model_lstm_mlp.add(LSTM(4, input_shape=(1, look_back)))\n",
    "model_lstm_mlp.add(Dense(100, activation='relu', input_dim=2))\n",
    "model_lstm_mlp.add(Dense(1))\n",
    "model_lstm_mlp.compile(loss='mean_squared_error', optimizer='adam')\n",
    "\n",
    "model_lstm_mlp.fit(trainX, trainY, callbacks=[EarlyStopping(monitor='loss', patience=2),\n",
    "                                     ModelCheckpoint(filepath='best_model_lstm_mlp.h5',\n",
    "                                                     monitor='loss',\n",
    "                                                     save_best_only=True)],\n",
    "          batch_size=1,\n",
    "          verbose=2)\n",
    "\n",
    "model_lstm_mlp.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "9/9 [==============================] - 1s 2ms/step\n",
      "2/2 [==============================] - 0s 3ms/step\n",
      "Train Score: 2.95 RMSE\n",
      "Test Score: 7.07 RMSE\n"
     ]
    }
   ],
   "source": [
    "# make predictions\n",
    "trainPredict = model_lstm_mlp.predict(trainX)\n",
    "testPredict = model_lstm_mlp.predict(testX)\n",
    "\n",
    "# invert predictions\n",
    "trainPredict = scaler.inverse_transform(trainPredict)\n",
    "trainY = scaler.inverse_transform([trainY])\n",
    "testPredict = scaler.inverse_transform(testPredict)\n",
    "testY = scaler.inverse_transform([testY])\n",
    "# calculate root mean squared error\n",
    "trainScore = np.sqrt(mean_squared_error(trainY[0], trainPredict[:,0]))\n",
    "print('Train Score: %.2f RMSE' % (trainScore))\n",
    "testScore = np.sqrt(mean_squared_error(testY[0], testPredict[:,0]))\n",
    "print('Test Score: %.2f RMSE' % (testScore))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "MAE: 2.37218606988541\n",
      "MSE: 49.959117936089996\n",
      "RMSE: 7.068176422252772\n"
     ]
    }
   ],
   "source": [
    "from sklearn import metrics\n",
    "\n",
    "print('MAE:', metrics.mean_absolute_error(testY[0], testPredict[:,0]))\n",
    "print('MSE:', metrics.mean_squared_error(testY[0], testPredict[:,0]))\n",
    "print('RMSE:', np.sqrt(metrics.mean_squared_error(testY[0], testPredict[:,0])))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# shift train predictions for plotting\n",
    "trainPredictPlot = np.empty_like(dataset_univar)\n",
    "trainPredictPlot[:, :] = np.nan\n",
    "trainPredictPlot[look_back:len(trainPredict)+look_back, :] = trainPredict\n",
    "# shift test predictions for plotting\n",
    "testPredictPlot = np.empty_like(dataset_univar)\n",
    "testPredictPlot[:, :] = np.nan\n",
    "testPredictPlot[len(trainPredict)+(look_back*2)+1:len(dataset)-1, :] = testPredict\n",
    "# plot baseline and predictions\n",
    "plt.plot(trainPredictPlot)\n",
    "plt.plot(testPredictPlot)\n",
    "plt.show()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
